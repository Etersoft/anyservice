#!/bin/sh

PIDFile=$(pwd)/test.pid
User=$USER
WorkingDirectory=$(pwd)
ExecStart="./test_process.sh"
LOGDIR=./
NEWSERVNAME="test"


#/sbin/start-stop-daemon --start --exec /bin/su --pidfile $PIDFile --make-pidfile --user $User -- -s /bin/sh -l $User -c "cd $WorkingDirectory ; exec $ExecStart &" &> $LOGDIR/$NEWSERVNAME.log
#/sbin/start-stop-daemon --start --exec /bin/su --pidfile $PIDFile --make-pidfile -b --user $User -- -s /bin/sh -l $User -c "cd $WorkingDirectory ; exec $ExecStart &" &> $LOGDIR/$NEWSERVNAME.log

#TODO give start command arguments after -- #example: sleep -- 100
#/sbin/start-stop-daemon --start --pidfile $PIDFile --make-pidfile --background --user $User --startas "$WorkingDirectory/$ExecStart" &> $LOGDIR/$NEWSERVNAME.log
/sbin/start-stop-daemon --start --pidfile $PIDFile --make-pidfile --user $User --startas "$WorkingDirectory/$ExecStart" &> $LOGDIR/$NEWSERVNAME.log
echo "start-stop exit status $?" >> $LOGDIR/$NEWSERVNAME.log

pid_test(){
    realpid=$(cat my.pid)
    #cat $PIDFile
    #echo $realpid
    sspid=$(cat $PIDFile)
    my_assert_equals "$sspid" "$realpid" "pid $realpid $sspid"
}

user_test(){
    my_assert_equals "$User" $(cat my.user) User
}

dir_test(){
    my_assert_equals "$WorkingDirectory" "$(cat my.dir)" "Dir"
}

home_test(){
    my_assert_equals "/home/$User" "$(cat my.home)" "Home dir"
}

my_assert_equals(){
    [ "$1" = "$2" ] && echo "Тест $3 прошёл" || echo "Тест $3 не прошёл"
}

#cd $WorkingDirectory
#ls
pid_test
user_test
dir_test
home_test
